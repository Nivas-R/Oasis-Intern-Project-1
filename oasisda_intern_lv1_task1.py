# -*- coding: utf-8 -*-
"""OASISDA Intern LV1 Task1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Q2rJjan4mesZTaQo340ZFfd1iql_cU5

# **Data Loading**
"""

from google.colab import files
import pandas as pd
uploaded = files.upload()
df=pd.read_csv("menu.csv")
df.head()

"""# **Data** **Cleaning**

"""

print("Missing Values : \n", df.isnull().sum())
print("\n Duplicate Rows :", df.duplicated().sum())
print("\n Data Types :\n ", df.dtypes)

"""# **Handling Duplicate and Missing Values**"""

df = df.drop_duplicates()
print("Duplicate Rows After Cleaning:", df.duplicated().sum())

df.fillna(df.median(numeric_only=True), inplace=True)
df.fillna(df.mode().iloc[0], inplace=True)
print("\nMissing Values After Cleaning:\n", df.isnull().sum())

"""# **Descriptive Statistics**"""

print("Summary Statistics:\n", df.describe())
print("\n" + "="*50 + "\n")
for col in df.select_dtypes(include=['object']).columns:
    print(f"Unique values in '{col}': {df[col].nunique()}")
    print(df[col].unique()[:10])
    print("-" * 40)

"""# **Time Series Analysis**"""

import seaborn as sns
tem_counts = data['Item'].value_counts()
plt.figure(figsize=(12, 6))
sns.barplot(x=item_counts.head(10).index, y=item_counts.head(10).values)
plt.title('Top 10 Items by Frequency')
plt.xlabel('Item')
plt.ylabel('Frequency')
plt.xticks(rotation=90)
plt.show()
category_counts = data['Category'].value_counts()
plt.figure(figsize=(12, 6))
sns.barplot(x=category_counts.index, y=category_counts.values)
plt.title('Items by Category')
plt.xlabel('Category')
plt.ylabel('Frequency')
plt.xticks(rotation=90)
plt.show()

"""# **Customer and Product Analysis**"""

item_counts = data['Item'].value_counts()
print("Item Frequency:\n", item_counts.head(10))
category_counts = data['Category'].value_counts()
print("Category Frequency:\n", category_counts.head(10))

"""# **Visualization**"""

category_item_crosstab = pd.crosstab(index=data['Category'], columns=data['Item'])
sns.set(style="whitegrid")
item_counts = data['Item'].value_counts()
plt.figure(figsize=(12, 6))
sns.barplot(x=item_counts.head(10).index, y=item_counts.head(10).values, palette="viridis")
plt.title('Top 10 Items by Frequency')
plt.xlabel('Item')
plt.ylabel('Frequency')
plt.xticks(rotation=90)
plt.show()
# Line Plot
category_trends = data['Category'].value_counts().sort_index().cumsum()
plt.figure(figsize=(12, 6))
category_trends.plot(kind='line', marker='o', linestyle='-', color='b')
plt.title('Category Trends (Cumulative Count)')
plt.xlabel('Category')
plt.ylabel('Cumulative Count')
plt.xticks(rotation=90)
plt.grid(True)
plt.show()
# Plotting Heatmap
plt.figure(figsize=(18, 10))
sns.heatmap(category_item_crosstab, cmap="YlGnBu", cbar=True)
plt.title('Heatmap of Categories and Items')
plt.xlabel('Item')
plt.ylabel('Category')
plt.xticks(rotation=90)
plt.yticks(rotation=0)
plt.show()

"""# **Recommendations**"""

recommendations = """
1. Focus on Top-Selling Items: Based on the item frequency analysis, prioritize stocking and promoting the top 10 items that are most popular among customers.

2. Optimize Category Offerings: The category trends and heatmap indicate which categories are most popular. Focus on expanding offerings in these categories while considering reducing or discontinuing less popular categories.

3. Introduce New Items in Popular Categories: Consider introducing new items in the most popular categories to attract more customers and increase sales.

4. Monitor Seasonal Trends: Analyze the data periodically to identify any seasonal trends or shifts in customer preferences. Adjust menu offerings accordingly to meet changing demands.

5. Enhance Marketing Strategies: Use insights from the analysis to create targeted marketing campaigns promoting the most popular items and categories.

6. Customer Feedback: Gather feedback from customers on their favorite items and any suggestions for new menu items. Use this feedback to refine and improve the menu offerings.

7. Cross-Sell and Upsell: Leverage the popularity of top items to cross-sell and upsell complementary items, increasing overall sales and customer satisfaction.
"""

print("Actionable Recommendations Based on EDA:\n", recommendations)